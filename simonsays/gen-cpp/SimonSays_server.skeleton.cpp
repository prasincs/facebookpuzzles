// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SimonSays.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class SimonSaysHandler : virtual public SimonSaysIf {
 public:
  SimonSaysHandler() {
    // Your initialization goes here
  }

  bool registerClient(const std::string& email) {
    // Your implementation goes here
    printf("registerClient\n");
  }

  void startTurn(std::vector<Color::type> & _return) {
    // Your implementation goes here
    printf("startTurn\n");
  }

  bool chooseColor(const Color::type colorChosen) {
    // Your implementation goes here
    printf("chooseColor\n");
  }

  bool endTurn() {
    // Your implementation goes here
    printf("endTurn\n");
  }

  void winGame(std::string& _return) {
    // Your implementation goes here
    printf("winGame\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SimonSaysHandler> handler(new SimonSaysHandler());
  shared_ptr<TProcessor> processor(new SimonSaysProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

